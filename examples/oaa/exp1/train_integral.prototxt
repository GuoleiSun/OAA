name: "VOC_Classification"
#force_backward:true

layer {
  name: "data"
  type: "Python"
  top: "data"
  top: "label"
  top: "index"
  top: "flip"
  python_param {
    module: "voc_layers"
    layer: "VOCDataLayer"
  }
}

layer {
  bottom: "data"
  top: "conv1_1"
  name: "conv1_1"
  type: "Convolution"
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
  }
  param { 
    lr_mult: 1 
    decay_mult: 1 
  } 
  param { 
    lr_mult: 2 
    decay_mult: 0 
  }
}
layer {
  bottom: "conv1_1"
  top: "conv1_1"
  name: "relu1_1"
  type: "ReLU"
}
layer {
  bottom: "conv1_1"
  top: "conv1_2"
  name: "conv1_2"
  type: "Convolution"
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
  }
  param {
    lr_mult: 1 
    decay_mult: 1 
  } 
  param { 
    lr_mult: 2 
    decay_mult: 0 
  }
}
layer {
  bottom: "conv1_2"
  top: "conv1_2"
  name: "relu1_2"
  type: "ReLU"
}
layer {
  bottom: "conv1_2"
  top: "pool1"
  name: "pool1"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}

layer {
  bottom: "pool1"
  top: "conv2_1"
  name: "conv2_1"
  type: "Convolution"
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
  }
  param {
    lr_mult: 1 
    decay_mult: 1 
  } 
  param { 
    lr_mult: 2 
    decay_mult: 0 
  }
}
layer {
  bottom: "conv2_1"
  top: "conv2_1"
  name: "relu2_1"
  type: "ReLU"
}
layer {
  bottom: "conv2_1"
  top: "conv2_2"
  name: "conv2_2"
  type: "Convolution"
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
  }
  param {
    lr_mult: 1 
    decay_mult: 1 
  } 
  param { 
    lr_mult: 2 
    decay_mult: 0 
  }
}
layer {
  bottom: "conv2_2"
  top: "conv2_2"
  name: "relu2_2"
  type: "ReLU"
}
layer {
  bottom: "conv2_2"
  top: "pool2"
  name: "pool2"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  bottom: "pool2"
  top: "conv3_1"
  name: "conv3_1"
  type: "Convolution"
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
  param {
    lr_mult: 1 
    decay_mult: 1 
  } 
  param { 
    lr_mult: 2 
    decay_mult: 0 
  }
}
layer {
  bottom: "conv3_1"
  top: "conv3_1"
  name: "relu3_1"
  type: "ReLU"
}
layer {
  bottom: "conv3_1"
  top: "conv3_2"
  name: "conv3_2"
  type: "Convolution"
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
  param {
    lr_mult: 1 
    decay_mult: 1 
  } 
  param { 
    lr_mult: 2 
    decay_mult: 0 
  }
}
layer {
  bottom: "conv3_2"
  top: "conv3_2"
  name: "relu3_2"
  type: "ReLU"
}
layer {
  bottom: "conv3_2"
  top: "conv3_3"
  name: "conv3_3"
  type: "Convolution"
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
  param {
    lr_mult: 1 
    decay_mult: 1 
  } 
  param { 
    lr_mult: 2 
    decay_mult: 0 
  }
}
layer {
  bottom: "conv3_3"
  top: "conv3_3"
  name: "relu3_3"
  type: "ReLU"
}
layer {
  bottom: "conv3_3"
  top: "pool3"
  name: "pool3"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  bottom: "pool3"
  top: "conv4_1"
  name: "conv4_1"
  type: "Convolution"
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
  param {
    lr_mult: 1 
    decay_mult: 1 
  } 
  param { 
    lr_mult: 2 
    decay_mult: 0 
  }
}
layer {
  bottom: "conv4_1"
  top: "conv4_1"
  name: "relu4_1"
  type: "ReLU"
}
layer {
  bottom: "conv4_1"
  top: "conv4_2"
  name: "conv4_2"
  type: "Convolution"
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
  param {
    lr_mult: 1 
    decay_mult: 1 
  } 
  param { 
    lr_mult: 2 
    decay_mult: 0 
  }
}
layer {
  bottom: "conv4_2"
  top: "conv4_2"
  name: "relu4_2"
  type: "ReLU"
}
layer {
  bottom: "conv4_2"
  top: "conv4_3"
  name: "conv4_3"
  type: "Convolution"
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
  param {
    lr_mult: 1 
    decay_mult: 1 
  } 
  param { 
    lr_mult: 2 
    decay_mult: 0 
  }
}
layer {
  bottom: "conv4_3"
  top: "conv4_3"
  name: "relu4_3"
  type: "ReLU"
}
layer {
  bottom: "conv4_3"
  top: "pool4"
  name: "pool4"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 1
    pad: 1
  }
}
layer {
  bottom: "pool4"
  top: "conv5_1"
  name: "conv5_1"
  type: "Convolution"
  convolution_param {
    num_output: 512
    pad: 2
    dilation: 2
    #pad: 1
    kernel_size: 3
  }
  param {
    lr_mult: 1 
    decay_mult: 1 
  } 
  param { 
    lr_mult: 2 
    decay_mult: 0 
  }
}
layer {
  bottom: "conv5_1"
  top: "conv5_1"
  name: "relu5_1"
  type: "ReLU"
}
layer {
  bottom: "conv5_1"
  top: "conv5_2"
  name: "conv5_2"
  type: "Convolution"
  convolution_param {
    num_output: 512
    pad: 2
    dilation: 2
    #pad: 1
    kernel_size: 3
  }
  param {
    lr_mult: 1 
    decay_mult: 1 
  } 
  param { 
    lr_mult: 2 
    decay_mult: 0 
  }
}

layer {
  bottom: "conv5_2"
  top: "conv5_2"
  name: "relu5_2"
  type: "ReLU"
}
layer {
  bottom: "conv5_2"
  top: "conv5_3"
  name: "conv5_3"
  type: "Convolution"
  convolution_param {
    num_output: 512
    pad: 2
    dilation: 2
    #pad: 1
    kernel_size: 3
  }
  param {
    lr_mult: 1 
    decay_mult: 1 
  } 
  param { 
    lr_mult: 2 
    decay_mult: 0 
  }
}
layer {
  bottom: "conv5_3"
  top: "conv5_3"
  name: "relu5_3"
  type: "ReLU"
}

#===== initial attention generator
layer {
  bottom: "conv5_3"
  top: "conv1_b1"
  name: "conv1_b1"
  type: "Convolution"
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }  
  param { 
    lr_mult: 1 
    decay_mult: 1 
  } 
  param { 
    lr_mult: 2 
    decay_mult: 0 
  }
}
layer {
  bottom: "conv1_b1"
  top: "conv1_b1"
  name: "relu1_b1"
  type: "ReLU"
}
layer {
  bottom: "conv1_b1"
  top: "conv2_b1"
  name: "conv2_b1"
  type: "Convolution"
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }  
  param { 
    lr_mult: 1 
    decay_mult: 1 
  } 
  param { 
    lr_mult: 2 
    decay_mult: 0 
  }
}
layer {
  bottom: "conv2_b1"
  top: "conv2_b1"
  name: "relu2_b1"
  type: "ReLU"
}
layer {
  bottom: "conv2_b1"
  top: "conv3_b1"
  name: "conv3_b1"
  type: "Convolution"
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }  
  param { 
    lr_mult: 1 
    decay_mult: 1 
  } 
  param { 
    lr_mult: 2 
    decay_mult: 0 
  }
}
layer {
  bottom: "conv3_b1"
  top: "conv3_b1"
  name: "relu3_b1"
  type: "ReLU"
}
#layer {
#  bottom: "conv3_b1"
#  top: "conv3_b1"
#  name: "drop3_b1"
#  type: "Dropout"
#  dropout_param {
#    dropout_ratio: 0.5
#  }
#}
layer {
  bottom: "conv3_b1"
  top: "score_b1"
  name: "score_b1"
  type: "Convolution"
  convolution_param {
    num_output: 20
    pad: 0
    kernel_size: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }  
  param { 
    lr_mult: 1 
    decay_mult: 1 
  } 
  param { 
    lr_mult: 2 
    decay_mult: 0 
  }
}
layer {
  name: "pool_b1_pre"
  type: "Pooling"
  bottom: "score_b1"
  top: "pool_b1_pre"
  pooling_param {
    pool: AVE
    global_pooling: true
  }
}
layer {
  name: "sigmoid"
  bottom: "pool_b1_pre"
  top: "sigmoid"
  type: "Sigmoid"
}
layer {
  name: "score_trans"
  type: "Python"
  bottom: "score_b1"
  bottom: "label"
  bottom: "index"
  bottom: "flip"
  bottom: "sigmoid"
  top: "score_trans" 
  python_param {
    module: "soft_mask_compete"
    layer: "AttentionStoreProbMAXLayer"
    param_str: "{\'memory_dir\': \'./exp1/memory1a/\', \'atten_dir\': \'./exp1/atten1a/\'}"
  }
  propagate_down: 1
  propagate_down: 0
  propagate_down: 0
  propagate_down: 0
  propagate_down: 0
}
layer {
  name: "pool_b1"
  type: "Pooling"
  bottom: "score_trans"
  top: "pool_b1"
  pooling_param {
    pool: AVE
    global_pooling: true
  }
}
layer {
  name: "cls_loss"
  type: "SigmoidCrossEntropyLoss"
  bottom: "pool_b1"
  bottom: "label"
  top: "cls_loss"
  loss_weight: 1
  loss_param {normalize: true ignore_label: 255 }
}

